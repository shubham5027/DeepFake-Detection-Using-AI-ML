
// Service to detect if an image was generated by AI using Eden AI

interface AIGenerationResult {
  score: number;
  confidence: number;
  prediction: string;
  metadata: {
    model: string;
    processing_time: number;
  };
}

export const detectAIGenerated = async (file: File): Promise<AIGenerationResult> => {
  // Create form data
  const formData = new FormData();
  formData.append("providers", "winstonai");
  formData.append("file", file);
  
  // Start time for processing measurement
  const startTime = performance.now();
  
  try {
    // Make API request to Eden AI
    const response = await fetch("https://api.edenai.run/v2/image/ai_detection", {
      method: "POST",
      headers: {
        "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiOGE1YmQwOTYtZTQ2OC00ZjEwLTk2Y2MtOWU2ZjUwMjIxZjY3IiwidHlwZSI6ImFwaV90b2tlbiJ9.QL-Qjs13w0VxiLng4b_9AS8uD16n1u7fM3vT31pX7F0"
      },
      body: formData
    });
    
    // Calculate processing time
    const processingTime = (performance.now() - startTime) / 1000;
    
    if (!response.ok) {
      throw new Error(`API request failed with status ${response.status}`);
    }
    
    const data = await response.json();
    console.log("Authentic AI Detection response:", data);
    
    // Extract the WinstonAI results
    const winstonResults = data.winstonai || {};
    
    // Get the prediction and score
    const prediction = winstonResults.ai_or_not || "unknown";
    const score = prediction === "ai" ? 
      (winstonResults.ai_or_not_score || 0.5) : 
      1 - (winstonResults.ai_or_not_score || 0.5);
    
    return {
      score: parseFloat(score.toFixed(2)),
      confidence: parseFloat((winstonResults.ai_or_not_score || 0.5).toFixed(2)),
      prediction: prediction,
      metadata: {
        model: "Authentic AI Model",
        processing_time: processingTime
      }
    };
  } catch (error) {
    console.error("AI generation detection error:", error);
    
    // Fallback: Return a low confidence result for errors
    return {
      score: 0.5,
      confidence: 0.5,
      prediction: "unknown",
      metadata: {
        model: "Authentic AI (Error)",
        processing_time: (performance.now() - startTime) / 1000
      }
    };
  }
};
